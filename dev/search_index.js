var documenterSearchIndex = {"docs":
[{"location":"Placeholder/#Placeholder","page":"Placeholder","title":"Placeholder","text":"","category":"section"},{"location":"Placeholder/","page":"Placeholder","title":"Placeholder","text":"```","category":"page"},{"location":"RiskMeasures/#Risk-Measures","page":"Risk Measures","title":"Risk Measures","text":"","category":"section"},{"location":"RiskMeasures/#Standard-Risk-Metrics","page":"Risk Measures","title":"Standard Risk Metrics","text":"","category":"section"},{"location":"RiskMeasures/","page":"Risk Measures","title":"Risk Measures","text":"specificrisk\nsystematicrisk\ntotalrisk","category":"page"},{"location":"RiskMeasures/#PerformanceAnalytics.specificrisk","page":"Risk Measures","title":"PerformanceAnalytics.specificrisk","text":"specificrisk(Ra::AbstractArray{<:Number},Rb::AbstractArray{<:Number},Rf::Number=0)\n\nThe spicific risk is calculated as the standard deviation of the residuals from a factor regression.\n\nSpecificRisk = std(epsilon_t) = std((r_at -r_f) - alpha - betatimes(r_bt-r_f))\n\n\n\n\n\nspecificrisk(Ra::AssetReturn,Rb::AssetReturn,Rf::Number=0)\n\nThe spicific risk is calculated as the standard deviation of the residuals from a factor regression.\n\n\n\n\n\n","category":"function"},{"location":"RiskMeasures/#PerformanceAnalytics.systematicrisk","page":"Risk Measures","title":"PerformanceAnalytics.systematicrisk","text":"systematicrisk(Ra::AbstractArray{<:Number},Rb::AbstractArray{<:Number},Rf::Number=0)\n\nIs the systematic risk of the return. It is calculated by multipling the factor loading from a linear factor model of the return against the benchmark return by the standard deviation of the benchmark return.\n\nSystematicRisk = beta_r_ar_btimes std(R_b)\n\n\n\n\n\nsystematicrisk(Ra::AssetReturn,Rb::AssetReturn,Rf::Number=0)\n\nCalculated by multipling the factor loading from a linear factor model of the return against the benchmark return by the standard deviation of the benchmark return.\n\n\n\n\n\n","category":"function"},{"location":"RiskMeasures/#PerformanceAnalytics.totalrisk","page":"Risk Measures","title":"PerformanceAnalytics.totalrisk","text":"totalrisk(Ra::AbstractArray{<:Number},Rb::AbstractArray{<:Number},Rf::Number=0)\n\nTotal risk is defined as a combination of systematic and specific risk.\n\nTotalRisk = sqrtSystematicRisk^2+SpecificRisk^2\n\n\n\n\n\ntotalrisk(Ra::AssetReturn,Rb::AssetReturn,Rf::Number=0)\n\nTotal risk is defined as a combination of systematic and specific risk.\n\n\n\n\n\n","category":"function"},{"location":"RiskMeasures/#Drawdown-Metrics","page":"Risk Measures","title":"Drawdown Metrics","text":"","category":"section"},{"location":"RiskMeasures/","page":"Risk Measures","title":"Risk Measures","text":"drawdown\nmaxdrawdown\navgdrawdown\ndrawdown_table\npainindex","category":"page"},{"location":"RiskMeasures/#PerformanceAnalytics.drawdown","page":"Risk Measures","title":"PerformanceAnalytics.drawdown","text":"drawdown(x::AbstractArray{<:Number})\n\nIs the drawdown of each return from the last peak. Is the same length as the return series provided.\n\n\n\n\n\ndrawdown(x::AssetReturn)\n\nIs the drawdown of each return from the last peak.\n\n\n\n\n\n","category":"function"},{"location":"RiskMeasures/#PerformanceAnalytics.maxdrawdown","page":"Risk Measures","title":"PerformanceAnalytics.maxdrawdown","text":"maxdrawdown(x::AbstractArray{<:Number})\n\nCalculates the maximum drawdow for a return series.\n\n\n\n\n\nmaxdrawdown(x::AssetReturn)\n\nCalculates the maximum drawdow for a return series.\n\n\n\n\n\n","category":"function"},{"location":"RiskMeasures/#PerformanceAnalytics.avgdrawdown","page":"Risk Measures","title":"PerformanceAnalytics.avgdrawdown","text":"avgdrawdown(x::AbstractArray{<:Number})\n\nReturns the average drowdown for a return series.\n\n\n\n\n\navgdrawdown(x::AssetReturn)\n\nReturns the average drowdown for a return series.\n\n\n\n\n\n","category":"function"},{"location":"RiskMeasures/#PerformanceAnalytics.drawdown_table","page":"Risk Measures","title":"PerformanceAnalytics.drawdown_table","text":"drawdown_table(x::AbstractArray{<:Number},dates::AbstractArray{<:TimeType})\n\nReturns a matrix of drawdowns sorted by depth. The second column returns the depth of the drawdown. The 3rd, 4th, and 5th columns return the start, deepest point, and final date of the drawdown. The last column returns the length of the drawdown from the start to the end.\n\n\n\n\n\ndrawdown_table(x::AssetReturn)\n\nReturns a matrix of drawdowns sorted by depth. The second column returns the depth of the drawdown. The 3rd, 4th, and 5th columns return the start, deepest point, and final date of the drawdown. The last column returns the length of the drawdown from the start to the end.\n\n\n\n\n\n","category":"function"},{"location":"RiskMeasures/#PerformanceAnalytics.painindex","page":"Risk Measures","title":"PerformanceAnalytics.painindex","text":"painindex(R::AbstractArray{<:Number})\n\nMean value of drawdowns over entire period.\n\nPainIndex = sum_t=1^n fracD_tntext where D_ttext is the drawdown at time t since the last peak\n\n\n\n\n\npainindex(R::AssetReturn)\n\nCalculates the Pain Index.\n\n\n\n\n\n","category":"function"},{"location":"RiskMeasures/#Downside-Risk-Metrics","page":"Risk Measures","title":"Downside Risk Metrics","text":"","category":"section"},{"location":"RiskMeasures/","page":"Risk Measures","title":"Risk Measures","text":"downsidedeviation\ndownsidepotential\nsemideviation\nsemivariance","category":"page"},{"location":"RiskMeasures/#PerformanceAnalytics.downsidedeviation","page":"Risk Measures","title":"PerformanceAnalytics.downsidedeviation","text":"downsidedeviation(R::AbstractArray{<:Number},MAR::Number = 0)\n\nCalculates the downside deviation of a return series. MAR = Minimum Acceptable Returns\n\nDownsideDeviation = sqrtsum_t=1^nfracmin(r_t-MAR)0^2n\n\n\n\n\n\ndownsidedeviation(R::AssetReturn,MAR::Number = 0)\n\nCalculates the downside deviation of a return series. MAR = Minimum Acceptable Returns\n\n\n\n\n\n","category":"function"},{"location":"RiskMeasures/#PerformanceAnalytics.downsidepotential","page":"Risk Measures","title":"PerformanceAnalytics.downsidepotential","text":"DonwsidePotential(R::AbstractArray{<:Number}, MAR::Number=0)\n\nCalculates the downside potential of a return series. MAR = Minimum Acceptable Returns\n\n\n\n\n\n","category":"function"},{"location":"RiskMeasures/#PerformanceAnalytics.semideviation","page":"Risk Measures","title":"PerformanceAnalytics.semideviation","text":"semideviation((R::AbstractArray{<:Number})\n\nCalculates the semi deviation of a return series. This is equal to the downside deviation where the MAR is set to the arithmetic mean of the return series.\n\nSemiDeviation = sqrtsum_t=1^nfracmin(r_t-overliner)0^2n\n\n\n\n\n\nsemideviation(R::AssetReturn)\n\nCalculates the semi deviation of a Asset Return.\n\n\n\n\n\n","category":"function"},{"location":"RiskMeasures/#PerformanceAnalytics.semivariance","page":"Risk Measures","title":"PerformanceAnalytics.semivariance","text":"semivariance(R::AbstractArray{<:Number})\n\nCalculates the semi variance of a return series. This is equal to the square of the semi deviation.\n\nSemiVariance = SemiDeviation^2  = sum_t=1^nfracmin(r_t-overliner)0^2n\n\n\n\n\n\nsemivariance(R::AbstractArray{<:Number})\n\nCalculates the semi variance of a AssetReturn.\n\n\n\n\n\n","category":"function"},{"location":"RiskMeasures/#VaR-and-ES","page":"Risk Measures","title":"VaR & ES","text":"","category":"section"},{"location":"RiskMeasures/","page":"Risk Measures","title":"Risk Measures","text":"valueatrisk\nexpectedshortfall","category":"page"},{"location":"RiskMeasures/#PerformanceAnalytics.valueatrisk","page":"Risk Measures","title":"PerformanceAnalytics.valueatrisk","text":"valueatrisk(R::AbstractArray{<:Number},p::Number,method::AbstractString=\"gaussian\")\n\nCalculates the Value at Risk (VaR) for a return series and a probility level p\n\nMethods:\n\ngaussian (Default)\nhistorical\ncornish_fisher  \n\nGaussian:\n\nVaR_p = = overliner + sigma*Phi^-1(p)\n\n\n\n\n\nvalueatrisk(R::AssetReturn,p::Number,method::AbstractString=\"gaussian\")\n\nCalculates the Value at Risk (VaR) for a return series and a probility level p\n\nMethods:\n\ngaussian (Default)\nhistorical\ncornish_fisher  \n\n\n\n\n\n","category":"function"},{"location":"RiskMeasures/#PerformanceAnalytics.expectedshortfall","page":"Risk Measures","title":"PerformanceAnalytics.expectedshortfall","text":"expectedshortfall(R::AbstractArray{<:Number},p::Number,method::AbstractString=\"gaussian\")\n\nCalculates the Expected Shortfall for a return series and a probility level p\n\nMethods:\n\ngaussian (Default)\nhistorical\ncornish_fisher  \n\nGaussian:\n\nExpectedShortfall_p = overliner + sigma*fracphi(Phi^-1(p))1-p text where Phi^-1text is the inverse of the normal CDF (quantile) and phitext is the pdf or the standard normal\n\n\n\n\n\nexpectedshortfall(R::AssetReturn,p::Number,method::AbstractString=\"gaussian\")\n\nCalculates the Expected Shortfall for a return series and a probility level p\n\nMethods:\n\ngaussian (Default)\nhistorical\ncornish_fisher  \n\n\n\n\n\n","category":"function"},{"location":"RiskMeasures/#Other","page":"Risk Measures","title":"Other","text":"","category":"section"},{"location":"RiskMeasures/","page":"Risk Measures","title":"Risk Measures","text":"trackingerror","category":"page"},{"location":"RiskMeasures/#PerformanceAnalytics.trackingerror","page":"Risk Measures","title":"PerformanceAnalytics.trackingerror","text":"trackingerror(Ra::AbstractArray{<:Number},Rb::AbstractArray{<:Number},scale::Number=1)\n\nMeasures how well a return tracks its benchmark.\n\nTrackingError(r_ar_b) = sqrtsum_t=1^nfrac(r_at -r_bt)^2n\n\n\n\n\n\ntrackingerror(Ra::AssetReturn,Rb::AssetReturn)\n\nMeasures how well a return tracks its benchmark.\n\n\n\n\n\n","category":"function"},{"location":"Performance/#Performance-Metrics","page":"Performance Measures","title":"Performance Metrics","text":"","category":"section"},{"location":"Performance/#Sharpe-Ratio-Style-Metrics","page":"Performance Measures","title":"Sharpe Ratio Style Metrics","text":"","category":"section"},{"location":"Performance/","page":"Performance Measures","title":"Performance Measures","text":"Ratios that quantify the risk return trade off, with different risk and return measures.","category":"page"},{"location":"Performance/","page":"Performance Measures","title":"Performance Measures","text":"sharperatio\nadjustedsharpe\ntreynorratio\nkappa\nappraisalratio\ninformationratio","category":"page"},{"location":"Performance/#PerformanceAnalytics.sharperatio","page":"Performance Measures","title":"PerformanceAnalytics.sharperatio","text":"sharperatio(R::Number,σ::Number,Rf::Number=0.;scale=1)\n\nCalculates the Sharpe Ratio from a given return, standard deviation, and risk free rate.\n\nSR=fracr_a - r_fsigma_a\n\n\n\n\n\nsharperatio(R::AbstractArray{<:Number},Rf::Number=0.;scale)\n\nCalculates the Sharpe Ratio from a given return series and a risk free rate.\n\n\n\n\n\nsharperatio(R::AssetReturn,Rf::Number=0.)\n\nCalculates the annualized Sharpe Ratio.\n\n\n\n\n\n","category":"function"},{"location":"Performance/#PerformanceAnalytics.adjustedsharpe","page":"Performance Measures","title":"PerformanceAnalytics.adjustedsharpe","text":"adjustedsharpe(R::Number,σ::Number,S::Number,K::Number,Rf::Number=0.)\n\nCalculates the Adjusted Sharpe Ratio from Pezier and White (2006) for a preestimated return, standard deviation, skewness, and kurtosis. It adjusts for skewness and kurtosis.\n\nAdjSR=SR * 1+frac26*SR - (fracK-324)*SR^2\n\n\n\n\n\nAdjustedSharp(R::AbstractArray{<:Number},Rf::Number=0.;method::AbstractString=\"population\")\n\nCalculates the Adjusted Sharpe Ratio from Pezier and White (2006) for a return series.  \n\nmethod: specifies the method to be used in the estimation of the Skewness and Kurtosis. Can be one of sample, population, or fisher. Defaults to \"population\"\n\n\n\n\n\nAdjustedSharp(R::AbstractArray{<:Number},Rf::Number=0.;method::AbstractString=\"population\")\n\nCalculates the annualized Adjusted Sharpe Ratio from Pezier and White (2006) for a AssetReturn.  \n\nmethod: specifies the method to be used in the estimation of the Skewness and Kurtosis. Can be one of sample, population, or fisher. Defaults to \"population\"\n\n\n\n\n\n","category":"function"},{"location":"Performance/#PerformanceAnalytics.treynorratio","page":"Performance Measures","title":"PerformanceAnalytics.treynorratio","text":"treynorratio(Ra::AbstractArray{<:Number},Rb::AbstractArray{<:Number},Rf::Number=0;modified::Bool=false,scale=1)\n\nScale argument used to annualize all numbers for daily data use 252 (default is 1), for monthly 12, etc.  \n\nSharpeRatio that uses beta as risk rather than the assets standard deviation of returns. The modified TreynorRatio uses the systematic risk rather than the beta.\n\nTreynorRatio = fracfrac1ntimessum_t=1^n (r_at-r_ft)beta_r_ar_b\n\nModifiedTreynorRatio = fracfrac1ntimessum_t=1^n (r_at-r_ft)beta_r_ar_btimes std(R_b)\n\n\n\n\n\ntreynorratio(Ra::AssetReturn,Rb::AssetReturn,Rf::Number=0;modified::Bool=false)\n\nCalculates the Treynor Ratio.\n\n\n\n\n\n","category":"function"},{"location":"Performance/#PerformanceAnalytics.kappa","page":"Performance Measures","title":"PerformanceAnalytics.kappa","text":"kappa(R::AbstractArray{<:Number},MAR::Number=0.,k::Number=2)\n\nIf k=1 this returns the Sharpe-Omega Ratio. If k=2 this returns the Sortino Ratio\n\nKappa = fracr-MARsqrtkfrac1n*sum_t=1^nmax(MAR - r_t0)^k\n\n\n\n\n\nkappa(R::AssetReturn,MAR::Number=0.;k::Number=2)\n\nIf k=1 this returns the Sharpe-Omega Ratio. If k=2 this returns the Sortino Ratio\n\n\n\n\n\n","category":"function"},{"location":"Performance/#PerformanceAnalytics.appraisalratio","page":"Performance Measures","title":"PerformanceAnalytics.appraisalratio","text":"appraisalratio(Ra::AbstractArray{<:Number},Rb::AbstractArray{<:Number},Rf::Number=0,method::AbstractString = \"appraisal\",scale::Number=1)\n\nJensen's Alpha adjusted for risk. The modified version uses β as the risk measure. The appraisal version uses specific risk. The alternative version uses systematic risk.\n\nfracalpharisk measure\n\n\n\n\n\nappraisalratio(Ra::AssetReturn,Rb::AssetReturn,Rf::Number=0;method::AbstractString = \"appraisal\")\n\nJensen's Alpha adjusted for risk.\n\n\n\n\n\n","category":"function"},{"location":"Performance/#PerformanceAnalytics.informationratio","page":"Performance Measures","title":"PerformanceAnalytics.informationratio","text":"informationratio(Ra::AbstractArray{<:Number},Rb::AbstractArray{<:Number},scale::Number=1)\n\nCalculates the Information Ratio. It is defined as the Active Premium over the Tracking Error. The tracking error needs to be annualized therefore it is important to specify the periodecity of the data with scale.\n\nInformationRatio(RaRbscale) = fracActivePremium(r_ar_bscale)TrackingError(r_ar_bscale) = frac(1+overliner_a)^scale- (1+overliner_b)^scalesqrtsum_t=1^nfrac(r_at -r_bt)^2ntimessqrtscale\n\n\n\n\n\ninformationratio(Ra::AssetReturn,Rb::AssetReturn)\n\nCalculates the Information Ratio. It is defined as the Active Premium over the Tracking Error.\n\n\n\n\n\n","category":"function"},{"location":"Performance/#Drawdown-Based-Metrics","page":"Performance Measures","title":"Drawdown Based Metrics","text":"","category":"section"},{"location":"Performance/","page":"Performance Measures","title":"Performance Measures","text":"burkeratio\ncalmarratio","category":"page"},{"location":"Performance/#PerformanceAnalytics.burkeratio","page":"Performance Measures","title":"PerformanceAnalytics.burkeratio","text":"burkeratio(Ra::AbstractArray{<:Number}, Drawdowns::AbstractArray{<:Number};Rf::Number=0.,scale=1)\n\nCalculates the Burke Ratio from a return series, a risk free rate, and drawdowns.\n\nBurkeRatio = fracr_a-r_fsqrtsum_t=1^dD_t^2\n\n\n\n\n\nburkeratio(R::AbstractArray{<:Number}; Rf::Float64 = 0., modified::Bool = false, scale::Number=1)\n\nCalculates the Burke Ratio from a return series and a risk free rate.  \n\nArguments\n\nRa is a vector of returns.  \nRf is a risk free rate\nmodified adjusted for the number of drawdowns (default is false)\nscale to annualize  (default to 1)\n\n\n\n\n\nburkeratio(AR::AssetReturn; Rf::Float64 = 0., modified::Bool = false)\n\nCalculates the Burke Ratio from a return series and a risk free rate.\n\nArguments\n\nRa is a vector of returns.  \nRf is the risk free rate.\nmodified adjusted for the number of drawdowns (default is false)\n\n\n\n\n\n","category":"function"},{"location":"Performance/#PerformanceAnalytics.calmarratio","page":"Performance Measures","title":"PerformanceAnalytics.calmarratio","text":"calmarratio(R::AbstractArray{<:Number},scale::Float64=1.)\n\nRisk return metric. Gives the annualized return divided by the maximum drawdown.   scale is the scaling factor used to annualize returns (defaults tol 1.)\n\nCalmarRatio = fracr_amaxDD\n\n\n\n\n\ncalmarratio(R::AssetReturn)\n\nRisk return metric. Gives the annualized return divided by the maximum drawdown.\n\n\n\n\n\n","category":"function"},{"location":"Performance/#Misc","page":"Performance Measures","title":"Misc","text":"","category":"section"},{"location":"Performance/","page":"Performance Measures","title":"Performance Measures","text":"jensensalpha\nbernardoledoitratio\nhurstindex","category":"page"},{"location":"Performance/#PerformanceAnalytics.jensensalpha","page":"Performance Measures","title":"PerformanceAnalytics.jensensalpha","text":"jensensalpha(Y::AbstractArray{<:Number},X::AbstractArray{<:Number}...;scale::Number=1)\n\nReturns the annualized Jensens Alpha.\n\nArguments\n\nY the assets return\nX the benchmark return \nscale the scaling number used to annualize returns (defaults to 1)\n\n\n\n\n\njensensalpha(Y::AssetReturn,X::AssetReturn...)\n\nReturns the annualized Jensens Alpha.\n\n\n\n\n\n","category":"function"},{"location":"Performance/#PerformanceAnalytics.bernardoledoitratio","page":"Performance Measures","title":"PerformanceAnalytics.bernardoledoitratio","text":"bernardoledoitratio(R::AbstractVector{<:Number})\n\nCalculates the Bernardo Ledoit ratio for a return series.\n\nBernardo Ledoit Ratio = fracfrac1nsum_t=1^nmax(r_t0)frac1nsum_t=1^nmax(-r_t0)\n\n\n\n\n\nbernardoledoitratio(R::AssetReturn)\n\nCalculates the Bernardo Ledoit ratio for a AssetReturn.\n\n\n\n\n\n","category":"function"},{"location":"Performance/#PerformanceAnalytics.hurstindex","page":"Performance Measures","title":"PerformanceAnalytics.hurstindex","text":"hurstindex(R::AbstractArray{<:Number})\n\nMeasures whether returns are random, peristent, or mean reverting.\n\n0 to 0.5: mean reverting    \n0.5: random\n0.5 to 1: persistent\n\nHurstIndex = fraclog(fracmax(r) - min(r)sigma)log(n)\n\n\n\n\n\nhurstindex(R::AssetReturn)\n\nMeasures whether returns are random, peristent, or mean reverting.\n\n\n\n\n\n","category":"function"},{"location":"Statistics/#Statistics-and-Data-Manipulation","page":"Statistics","title":"Statistics & Data Manipulation","text":"","category":"section"},{"location":"Statistics/#Means","page":"Statistics","title":"Means","text":"","category":"section"},{"location":"Statistics/","page":"Statistics","title":"Statistics","text":"mean_arith\nmean_geo","category":"page"},{"location":"Statistics/#PerformanceAnalytics.mean_arith","page":"Statistics","title":"PerformanceAnalytics.mean_arith","text":"mean_arith(x)\n\nCalculates the arithmetic mean of a series.\n\n\n\n\n\n","category":"function"},{"location":"Statistics/#PerformanceAnalytics.mean_geo","page":"Statistics","title":"PerformanceAnalytics.mean_geo","text":"mean_geo(returns::Vector{Float64})\n\nCalculates the geometric mean of a series.\n\n\n\n\n\n","category":"function"},{"location":"Statistics/#Moments","page":"Statistics","title":"Moments","text":"","category":"section"},{"location":"Statistics/","page":"Statistics","title":"Statistics","text":"varp\nvars\nstdvp\nstdvs\nskew\nkurt\ncovariance\ncoskew\ncokurt","category":"page"},{"location":"Statistics/#PerformanceAnalytics.varp","page":"Statistics","title":"PerformanceAnalytics.varp","text":"varp(x)\n\nCalculates the population variance of a series.\n\n\n\n\n\n","category":"function"},{"location":"Statistics/#PerformanceAnalytics.vars","page":"Statistics","title":"PerformanceAnalytics.vars","text":"vars(x)\n\nCalculates the population standard deviation of a series.\n\n\n\n\n\n","category":"function"},{"location":"Statistics/#PerformanceAnalytics.stdvp","page":"Statistics","title":"PerformanceAnalytics.stdvp","text":"stdvp(x)\n\nCalculates the sample variance of a series.\n\n\n\n\n\n","category":"function"},{"location":"Statistics/#PerformanceAnalytics.stdvs","page":"Statistics","title":"PerformanceAnalytics.stdvs","text":"stdvs(x)\n\nCalculates the sample standard deviation of a series.\n\n\n\n\n\n","category":"function"},{"location":"Statistics/#PerformanceAnalytics.skew","page":"Statistics","title":"PerformanceAnalytics.skew","text":"skew(R, method=\"simple\")\n\nCalculates the skewness of a series.\n\nMethods:\n\nPopulation\nSample\nFisher\n\n\n\n\n\n","category":"function"},{"location":"Statistics/#PerformanceAnalytics.kurt","page":"Statistics","title":"PerformanceAnalytics.kurt","text":"kurt(R, method=\"simple\")\n\nCalculates the kurtosis of a series.\n\nMethods:\n\npopulation\nexcess (population - 3)\nsample\nsampleexcess (sample - 3)\nfisher\n\n\n\n\n\n","category":"function"},{"location":"Statistics/#PerformanceAnalytics.covariance","page":"Statistics","title":"PerformanceAnalytics.covariance","text":"covariance(Ra::AbstractArray{<:Number},Rb::AbstractArray{<:Number};corrected::Bool=false)\n\nCalculates the CoVariance of two asset returns.\n\nCoVariance(R_aR_b) = sum_i=1^n(R_a - overlineR_a times R_b - overlineR_b) timesfrac1n\n\nIf corrected=true\n\nCoVariance(R_aR_b) = sum_i=1^n(R_a - overlineR_a times R_b - overlineR_b) timesfrac1n-1\n\n\n\n\n\ncovariance(Ra::AssetReturn,Rb::AssetReturn;corrected::Bool=false)\n\nCalculates the CoVariance of two asset returns.\n\n\n\n\n\n","category":"function"},{"location":"Statistics/#PerformanceAnalytics.coskew","page":"Statistics","title":"PerformanceAnalytics.coskew","text":"coskew(Ra::AbstractArray{<:Number},Rb::AbstractArray{<:Number})\n\nCalculates the CoSkewness of returns.   Note that coskew(x,y) != coskew(y,x).\n\nCoskew(r_ar_b) = fraccov(r_a(r_b-overliner_b)^2)sum_i=1^n(r_b - overliner_b)^3timesfrac1n\n\n\n\n\n\ncoskew(Ra::AssetReturn,Rb::AssetReturn)\n\nCalculates the CoSkewness of returns.  \n\n\n\n\n\n","category":"function"},{"location":"Statistics/#PerformanceAnalytics.cokurt","page":"Statistics","title":"PerformanceAnalytics.cokurt","text":"cokurt(Ra::AbstractArray{<:Number},Rb::AbstractArray{<:Number})\n\nCalculates the symmetric CoKurtosis of two returns (i.e. Cokurt(Ra,Ra,Rb,Rb))\n\nCoKurtosis(r_ar_b) = fracfrac1ntimessum_t=1^n(r_a - overliner_a)^2times(r_b - overliner_b)^2sigma^2_r_atimessigma^2_r_b\n\n\n\n\n\ncokurt(Ra::AssetReturn,Rb::AssetReturn)\n\nCalculates the symmetric CoKurtosis of two returns (i.e. Cokurt(Ra,Ra,Rb,Rb))\n\n\n\n\n\n","category":"function"},{"location":"Statistics/#Regression-Based","page":"Statistics","title":"Regression Based","text":"","category":"section"},{"location":"Statistics/","page":"Statistics","title":"Statistics","text":"factor_regression\nfactor_alpha\nfactor_loadings\nfactor_resid","category":"page"},{"location":"Statistics/#PerformanceAnalytics.factor_regression","page":"Statistics","title":"PerformanceAnalytics.factor_regression","text":"factor_regression(Y::AbstractArray{<:Number},X::AbstractArray{<:Number}...;intercept::Bool=true)\n\nReturns alpha and beta estimates of a regression.\n\n\n\n\n\n","category":"function"},{"location":"Statistics/#PerformanceAnalytics.factor_alpha","page":"Statistics","title":"PerformanceAnalytics.factor_alpha","text":"factor_alpha(Y::AbstractArray{<:Number},X::AbstractArray{<:Number}...)\n\nReturns the α (intercept) of a (factor) regression.\n\n\n\n\n\n","category":"function"},{"location":"Statistics/#PerformanceAnalytics.factor_loadings","page":"Statistics","title":"PerformanceAnalytics.factor_loadings","text":"factor_loadings(Y::AbstractArray{<:Number},X::AbstractArray{<:Number}...;intercept::Bool=true)\n\nReturns the factor loadings (beta estimates) of a (factor) regression.\n\n\n\n\n\n","category":"function"},{"location":"Statistics/#PerformanceAnalytics.factor_resid","page":"Statistics","title":"PerformanceAnalytics.factor_resid","text":"factor_resid(Y::AbstractArray{<:Number},X::AbstractArray{<:Number}...;intercept::Bool=true)\n\nReturns the residuals of a (factor) regression.\n\n\n\n\n\n","category":"function"},{"location":"Statistics/#Calculating-Returns","page":"Statistics","title":"Calculating Returns","text":"","category":"section"},{"location":"Statistics/","page":"Statistics","title":"Statistics","text":"pct_change\nlog_diff\nsimple_diff\nannualize\nroll_apply","category":"page"},{"location":"Statistics/#PerformanceAnalytics.pct_change","page":"Statistics","title":"PerformanceAnalytics.pct_change","text":"pct_change(x)\n\nReturns the percent change of an array. (Calculates returns from a price series)\n\n\n\n\n\n","category":"function"},{"location":"Statistics/#PerformanceAnalytics.log_diff","page":"Statistics","title":"PerformanceAnalytics.log_diff","text":"log_diff(x)\n\nReturns the logarithmic difference. (Calculates log returns from a price series)\n\n\n\n\n\n","category":"function"},{"location":"Statistics/#PerformanceAnalytics.simple_diff","page":"Statistics","title":"PerformanceAnalytics.simple_diff","text":"simple_diff(x)\n\nReturns the difference. (Calculates the absolut price change)\n\n\n\n\n\n","category":"function"},{"location":"Statistics/#PerformanceAnalytics.annualize","page":"Statistics","title":"PerformanceAnalytics.annualize","text":"annualize(R::Number,scale::Float64=252)\n\nAnnualizes the return using the scaling factor.\n\n\n\n\n\nannualize(R::AssetReturn)\n\nAnnualizes the return.\n\n\n\n\n\n","category":"function"},{"location":"Statistics/#PerformanceAnalytics.roll_apply","page":"Statistics","title":"PerformanceAnalytics.roll_apply","text":"roll_apply(data::AbstractVector{<:Number}...;fun::Function, window::Int,retain_length::Bool=false,fill_with = NaN,always_return::Bool=false)\n\nApplies a fun::Function over a rolling window.\n\nArguments:\n\ndata::AbstractArray{<:Number}: one or multiple arrays.\nfun::Function: the function to be applied. Has to return a single value (not a Vector of values).\nwindow::Int: the window length.\nretain_length::Bool: whether to original length of the data provided should be retained. If true fills the observations that could not be calculated with fill_with.\nfill_with: The value that should be returned for values that could not be calculated.\nalways_return::Bool: returns a vector with fill_with equal to the initial data length if the window is longer than the length of the input data.\n\n\n\n\n\n","category":"function"},{"location":"Struct/#Struct","page":"Struct","title":"Struct","text":"","category":"section"},{"location":"Struct/#Asset","page":"Struct","title":"Asset","text":"","category":"section"},{"location":"Struct/","page":"Struct","title":"Struct","text":"These structs contain the price or return values, the timestamp information, the scaling factor to annualize the returns, the frequency of returns, the id, and the exchange the asset is traded on.  ","category":"page"},{"location":"Struct/","page":"Struct","title":"Struct","text":"If AssetReturn(ticker::String,from::TimeType,to::TimeType,freq::String) is called data is automatically downloaded using YFinance.jl and the exchange, freq, and scale are automatically stored/calculated. The package calculates the scale assuming 252 trading days in a year. Furthermore, the exchange is important to accurately aggregate intra-day data (the trading hours in a day are different for exchanges across the world). ","category":"page"},{"location":"Struct/","page":"Struct","title":"Struct","text":"AssetPrice\nAssetReturn","category":"page"},{"location":"Struct/#PerformanceAnalytics.AssetPrice","page":"Struct","title":"PerformanceAnalytics.AssetPrice","text":"AssetPrice(ticker::String,from::TimeType,to::TimeType,freq::String;exchange_local_time=true)\n\nGenerates a AssetPrice struct using YFinance.jl.\n\nArguments\n\nticker the Yahoo Finance ticker\nfrom a start time/date (either a ::Date or ::DateTime) \nto a end time/date (either a ::Date or ::DateTime)\nfreq the frequency of data. One of   \"3mo\",\"1mo\",\"1wk\",\"5d\",\"1d\",1h\",\"90m\",\"60m\",\"30m\",\"15m\",\"5m\",\"2m\",\"1m\"\nexchangelocaltime use the local time of the exchange as the timestamp (defaults to true)\n\nReturns\n\nAssetPrice\n\n\n\n\n\n","category":"type"},{"location":"Struct/#PerformanceAnalytics.AssetReturn","page":"Struct","title":"PerformanceAnalytics.AssetReturn","text":"AssetReturn(x::AssetPrice)\n\nCalculates the return from the price series of the AssetPrice and returns a AssetReturn.\n\n\n\n\n\nAssetReturn(ticker::String,from::TimeType,to::TimeType,freq::String)\n\nGenerates a AssetReturn struct using YFinance.jl. Internally calls AssetPrice and then calculates returns from the price series.\n\nArguments\n\nticker the Yahoo Finance ticker\nfrom a start time/date (either a ::Date or ::DateTime) \nto a end time/date (either a ::Date or ::DateTime)\nfreq the frequency of data. One of   \"3mo\",\"1mo\",\"1wk\",\"5d\",\"1d\",1h\",\"90m\",\"60m\",\"30m\",\"15m\",\"5m\",\"2m\",\"1m\"\nexchangelocaltime use the local time of the exchange as the timestamp (defaults to true)\n\nReturns\n\nAssetReturn\n\n\n\n\n\n","category":"type"},{"location":"Struct/#Accessing-Items","page":"Struct","title":"Accessing Items","text":"","category":"section"},{"location":"Struct/","page":"Struct","title":"Struct","text":"values\ntimestamp\nscale\nid","category":"page"},{"location":"Struct/#Base.values","page":"Struct","title":"Base.values","text":"Base.values(x::AssetPrice)\n\nReturns a vector of prices of the asset.\n\n\n\n\n\nBase.values(x::AssetReturn)\n\nReturns a vector of returns of the asset.\n\n\n\n\n\n","category":"function"},{"location":"Struct/#PerformanceAnalytics.timestamp","page":"Struct","title":"PerformanceAnalytics.timestamp","text":"timestamp(x::AssetPrice)\n\nReturns a vector of the timestamps of the asset.\n\n\n\n\n\ntimestamp(x::AssetReturn)\n\nReturns a vector of the timestamps of the asset.\n\n\n\n\n\n","category":"function"},{"location":"Struct/#PerformanceAnalytics.scale","page":"Struct","title":"PerformanceAnalytics.scale","text":"scale(x::AssetPrice)\n\nReturns the scaling number for the asset. Used to for annualization.\n\n\n\n\n\nscale(x::AssetReturn)\n\nReturns the scaling number for the asset. Used to for annualization.\n\n\n\n\n\n","category":"function"},{"location":"Struct/#PerformanceAnalytics.id","page":"Struct","title":"PerformanceAnalytics.id","text":"id(x::AssetPrice)\n\nReturns the id (ticker) of the asset.\n\n\n\n\n\nid(x::AssetReturn)\n\nReturns the id (ticker) of the asset.\n\n\n\n\n\n","category":"function"},{"location":"AllFunctions/#All-Functions","page":"All Functions","title":"All Functions","text":"","category":"section"},{"location":"AllFunctions/","page":"All Functions","title":"All Functions","text":"Modules = [PerformanceAnalytics]","category":"page"},{"location":"AllFunctions/#PerformanceAnalytics.AssetPrice-Tuple{String, Dates.TimeType, Dates.TimeType, String}","page":"All Functions","title":"PerformanceAnalytics.AssetPrice","text":"AssetPrice(ticker::String,from::TimeType,to::TimeType,freq::String;exchange_local_time=true)\n\nGenerates a AssetPrice struct using YFinance.jl.\n\nArguments\n\nticker the Yahoo Finance ticker\nfrom a start time/date (either a ::Date or ::DateTime) \nto a end time/date (either a ::Date or ::DateTime)\nfreq the frequency of data. One of   \"3mo\",\"1mo\",\"1wk\",\"5d\",\"1d\",1h\",\"90m\",\"60m\",\"30m\",\"15m\",\"5m\",\"2m\",\"1m\"\nexchangelocaltime use the local time of the exchange as the timestamp (defaults to true)\n\nReturns\n\nAssetPrice\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.AssetReturn-Tuple{AssetPrice}","page":"All Functions","title":"PerformanceAnalytics.AssetReturn","text":"AssetReturn(x::AssetPrice)\n\nCalculates the return from the price series of the AssetPrice and returns a AssetReturn.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.AssetReturn-Tuple{String, Dates.TimeType, Dates.TimeType, String}","page":"All Functions","title":"PerformanceAnalytics.AssetReturn","text":"AssetReturn(ticker::String,from::TimeType,to::TimeType,freq::String)\n\nGenerates a AssetReturn struct using YFinance.jl. Internally calls AssetPrice and then calculates returns from the price series.\n\nArguments\n\nticker the Yahoo Finance ticker\nfrom a start time/date (either a ::Date or ::DateTime) \nto a end time/date (either a ::Date or ::DateTime)\nfreq the frequency of data. One of   \"3mo\",\"1mo\",\"1wk\",\"5d\",\"1d\",1h\",\"90m\",\"60m\",\"30m\",\"15m\",\"5m\",\"2m\",\"1m\"\nexchangelocaltime use the local time of the exchange as the timestamp (defaults to true)\n\nReturns\n\nAssetReturn\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#Base.values-Tuple{AssetPrice}","page":"All Functions","title":"Base.values","text":"Base.values(x::AssetPrice)\n\nReturns a vector of prices of the asset.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#Base.values-Tuple{AssetReturn}","page":"All Functions","title":"Base.values","text":"Base.values(x::AssetReturn)\n\nReturns a vector of returns of the asset.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.activepremium-Tuple{AssetReturn, AssetReturn}","page":"All Functions","title":"PerformanceAnalytics.activepremium","text":"activepremium(Ra::AssetReturn, Rb::AssetReturn)\n\nIs defined as the annualized return minus the annualized benchmark return.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.activepremium-Tuple{Number, Number}","page":"All Functions","title":"PerformanceAnalytics.activepremium","text":"activepremium(Ra::Number, Rb::Number; scalea=1, scaleb=1)\n\nIs defined as the annualized return minus the annualized benchmark return.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.adjustedsharpe","page":"All Functions","title":"PerformanceAnalytics.adjustedsharpe","text":"AdjustedSharp(R::AbstractArray{<:Number},Rf::Number=0.;method::AbstractString=\"population\")\n\nCalculates the Adjusted Sharpe Ratio from Pezier and White (2006) for a return series.  \n\nmethod: specifies the method to be used in the estimation of the Skewness and Kurtosis. Can be one of sample, population, or fisher. Defaults to \"population\"\n\n\n\n\n\n","category":"function"},{"location":"AllFunctions/#PerformanceAnalytics.adjustedsharpe-2","page":"All Functions","title":"PerformanceAnalytics.adjustedsharpe","text":"AdjustedSharp(R::AbstractArray{<:Number},Rf::Number=0.;method::AbstractString=\"population\")\n\nCalculates the annualized Adjusted Sharpe Ratio from Pezier and White (2006) for a AssetReturn.  \n\nmethod: specifies the method to be used in the estimation of the Skewness and Kurtosis. Can be one of sample, population, or fisher. Defaults to \"population\"\n\n\n\n\n\n","category":"function"},{"location":"AllFunctions/#PerformanceAnalytics.adjustedsharpe-3","page":"All Functions","title":"PerformanceAnalytics.adjustedsharpe","text":"adjustedsharpe(R::Number,σ::Number,S::Number,K::Number,Rf::Number=0.)\n\nCalculates the Adjusted Sharpe Ratio from Pezier and White (2006) for a preestimated return, standard deviation, skewness, and kurtosis. It adjusts for skewness and kurtosis.\n\nAdjSR=SR * 1+frac26*SR - (fracK-324)*SR^2\n\n\n\n\n\n","category":"function"},{"location":"AllFunctions/#PerformanceAnalytics.annualize","page":"All Functions","title":"PerformanceAnalytics.annualize","text":"annualize(R::Number,scale::Float64=252)\n\nAnnualizes the return using the scaling factor.\n\n\n\n\n\n","category":"function"},{"location":"AllFunctions/#PerformanceAnalytics.annualize-Tuple{AssetReturn}","page":"All Functions","title":"PerformanceAnalytics.annualize","text":"annualize(R::AssetReturn)\n\nAnnualizes the return.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.appraisalratio","page":"All Functions","title":"PerformanceAnalytics.appraisalratio","text":"appraisalratio(Ra::AbstractArray{<:Number},Rb::AbstractArray{<:Number},Rf::Number=0,method::AbstractString = \"appraisal\",scale::Number=1)\n\nJensen's Alpha adjusted for risk. The modified version uses β as the risk measure. The appraisal version uses specific risk. The alternative version uses systematic risk.\n\nfracalpharisk measure\n\n\n\n\n\n","category":"function"},{"location":"AllFunctions/#PerformanceAnalytics.appraisalratio-2","page":"All Functions","title":"PerformanceAnalytics.appraisalratio","text":"appraisalratio(Ra::AssetReturn,Rb::AssetReturn,Rf::Number=0;method::AbstractString = \"appraisal\")\n\nJensen's Alpha adjusted for risk.\n\n\n\n\n\n","category":"function"},{"location":"AllFunctions/#PerformanceAnalytics.avgdrawdown-Tuple{AbstractArray{<:Number}}","page":"All Functions","title":"PerformanceAnalytics.avgdrawdown","text":"avgdrawdown(x::AbstractArray{<:Number})\n\nReturns the average drowdown for a return series.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.avgdrawdown-Tuple{AssetReturn}","page":"All Functions","title":"PerformanceAnalytics.avgdrawdown","text":"avgdrawdown(x::AssetReturn)\n\nReturns the average drowdown for a return series.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.bernardoledoitratio-Tuple{AbstractVector{<:Number}}","page":"All Functions","title":"PerformanceAnalytics.bernardoledoitratio","text":"bernardoledoitratio(R::AbstractVector{<:Number})\n\nCalculates the Bernardo Ledoit ratio for a return series.\n\nBernardo Ledoit Ratio = fracfrac1nsum_t=1^nmax(r_t0)frac1nsum_t=1^nmax(-r_t0)\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.bernardoledoitratio-Tuple{AssetReturn}","page":"All Functions","title":"PerformanceAnalytics.bernardoledoitratio","text":"bernardoledoitratio(R::AssetReturn)\n\nCalculates the Bernardo Ledoit ratio for a AssetReturn.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.burkeratio-Tuple{AbstractArray{<:Number}}","page":"All Functions","title":"PerformanceAnalytics.burkeratio","text":"burkeratio(R::AbstractArray{<:Number}; Rf::Float64 = 0., modified::Bool = false, scale::Number=1)\n\nCalculates the Burke Ratio from a return series and a risk free rate.  \n\nArguments\n\nRa is a vector of returns.  \nRf is a risk free rate\nmodified adjusted for the number of drawdowns (default is false)\nscale to annualize  (default to 1)\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.burkeratio-Tuple{AssetReturn}","page":"All Functions","title":"PerformanceAnalytics.burkeratio","text":"burkeratio(AR::AssetReturn; Rf::Float64 = 0., modified::Bool = false)\n\nCalculates the Burke Ratio from a return series and a risk free rate.\n\nArguments\n\nRa is a vector of returns.  \nRf is the risk free rate.\nmodified adjusted for the number of drawdowns (default is false)\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.burkeratio-Tuple{Number, AbstractArray{<:Number}}","page":"All Functions","title":"PerformanceAnalytics.burkeratio","text":"burkeratio(Ra::AbstractArray{<:Number}, Drawdowns::AbstractArray{<:Number};Rf::Number=0.,scale=1)\n\nCalculates the Burke Ratio from a return series, a risk free rate, and drawdowns.\n\nBurkeRatio = fracr_a-r_fsqrtsum_t=1^dD_t^2\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.calmarratio","page":"All Functions","title":"PerformanceAnalytics.calmarratio","text":"calmarratio(R::AbstractArray{<:Number},scale::Float64=1.)\n\nRisk return metric. Gives the annualized return divided by the maximum drawdown.   scale is the scaling factor used to annualize returns (defaults tol 1.)\n\nCalmarRatio = fracr_amaxDD\n\n\n\n\n\n","category":"function"},{"location":"AllFunctions/#PerformanceAnalytics.calmarratio-Tuple{AssetReturn}","page":"All Functions","title":"PerformanceAnalytics.calmarratio","text":"calmarratio(R::AssetReturn)\n\nRisk return metric. Gives the annualized return divided by the maximum drawdown.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.cokurt-Tuple{AbstractArray{<:Number}, AbstractArray{<:Number}}","page":"All Functions","title":"PerformanceAnalytics.cokurt","text":"cokurt(Ra::AbstractArray{<:Number},Rb::AbstractArray{<:Number})\n\nCalculates the symmetric CoKurtosis of two returns (i.e. Cokurt(Ra,Ra,Rb,Rb))\n\nCoKurtosis(r_ar_b) = fracfrac1ntimessum_t=1^n(r_a - overliner_a)^2times(r_b - overliner_b)^2sigma^2_r_atimessigma^2_r_b\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.cokurt-Tuple{AssetReturn, AssetReturn}","page":"All Functions","title":"PerformanceAnalytics.cokurt","text":"cokurt(Ra::AssetReturn,Rb::AssetReturn)\n\nCalculates the symmetric CoKurtosis of two returns (i.e. Cokurt(Ra,Ra,Rb,Rb))\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.coskew-Tuple{AbstractArray{<:Number}, AbstractArray{<:Number}}","page":"All Functions","title":"PerformanceAnalytics.coskew","text":"coskew(Ra::AbstractArray{<:Number},Rb::AbstractArray{<:Number})\n\nCalculates the CoSkewness of returns.   Note that coskew(x,y) != coskew(y,x).\n\nCoskew(r_ar_b) = fraccov(r_a(r_b-overliner_b)^2)sum_i=1^n(r_b - overliner_b)^3timesfrac1n\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.coskew-Tuple{AssetReturn, AssetReturn}","page":"All Functions","title":"PerformanceAnalytics.coskew","text":"coskew(Ra::AssetReturn,Rb::AssetReturn)\n\nCalculates the CoSkewness of returns.  \n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.covariance-Tuple{AbstractArray{<:Number}, AbstractArray{<:Number}}","page":"All Functions","title":"PerformanceAnalytics.covariance","text":"covariance(Ra::AbstractArray{<:Number},Rb::AbstractArray{<:Number};corrected::Bool=false)\n\nCalculates the CoVariance of two asset returns.\n\nCoVariance(R_aR_b) = sum_i=1^n(R_a - overlineR_a times R_b - overlineR_b) timesfrac1n\n\nIf corrected=true\n\nCoVariance(R_aR_b) = sum_i=1^n(R_a - overlineR_a times R_b - overlineR_b) timesfrac1n-1\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.covariance-Tuple{AssetReturn, AssetReturn}","page":"All Functions","title":"PerformanceAnalytics.covariance","text":"covariance(Ra::AssetReturn,Rb::AssetReturn;corrected::Bool=false)\n\nCalculates the CoVariance of two asset returns.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.downsidedeviation","page":"All Functions","title":"PerformanceAnalytics.downsidedeviation","text":"downsidedeviation(R::AssetReturn,MAR::Number = 0)\n\nCalculates the downside deviation of a return series. MAR = Minimum Acceptable Returns\n\n\n\n\n\n","category":"function"},{"location":"AllFunctions/#PerformanceAnalytics.downsidedeviation-2","page":"All Functions","title":"PerformanceAnalytics.downsidedeviation","text":"downsidedeviation(R::AbstractArray{<:Number},MAR::Number = 0)\n\nCalculates the downside deviation of a return series. MAR = Minimum Acceptable Returns\n\nDownsideDeviation = sqrtsum_t=1^nfracmin(r_t-MAR)0^2n\n\n\n\n\n\n","category":"function"},{"location":"AllFunctions/#PerformanceAnalytics.downsidepotential","page":"All Functions","title":"PerformanceAnalytics.downsidepotential","text":"DonwsidePotential(R::AbstractArray{<:Number}, MAR::Number=0)\n\nCalculates the downside potential of a return series. MAR = Minimum Acceptable Returns\n\n\n\n\n\n","category":"function"},{"location":"AllFunctions/#PerformanceAnalytics.drawdown-Tuple{AbstractArray{<:Number}}","page":"All Functions","title":"PerformanceAnalytics.drawdown","text":"drawdown(x::AbstractArray{<:Number})\n\nIs the drawdown of each return from the last peak. Is the same length as the return series provided.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.drawdown-Tuple{AssetReturn}","page":"All Functions","title":"PerformanceAnalytics.drawdown","text":"drawdown(x::AssetReturn)\n\nIs the drawdown of each return from the last peak.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.drawdown_table-Tuple{AbstractArray{<:Number}, AbstractArray{<:Dates.TimeType}}","page":"All Functions","title":"PerformanceAnalytics.drawdown_table","text":"drawdown_table(x::AbstractArray{<:Number},dates::AbstractArray{<:TimeType})\n\nReturns a matrix of drawdowns sorted by depth. The second column returns the depth of the drawdown. The 3rd, 4th, and 5th columns return the start, deepest point, and final date of the drawdown. The last column returns the length of the drawdown from the start to the end.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.drawdown_table-Tuple{AssetReturn}","page":"All Functions","title":"PerformanceAnalytics.drawdown_table","text":"drawdown_table(x::AssetReturn)\n\nReturns a matrix of drawdowns sorted by depth. The second column returns the depth of the drawdown. The 3rd, 4th, and 5th columns return the start, deepest point, and final date of the drawdown. The last column returns the length of the drawdown from the start to the end.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.drawdownpeak-Tuple{AbstractArray{<:Number}}","page":"All Functions","title":"PerformanceAnalytics.drawdownpeak","text":"drawdownpeak(x::AbstractArray{<:Number})\n\nCalculates the cumulative drawdown since the last peak for each return in the time series.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.drawdownpeak-Tuple{AssetReturn}","page":"All Functions","title":"PerformanceAnalytics.drawdownpeak","text":"drawdownpeak(x::AssetReturn)\n\nCalculates the cumulative drawdown since the last peak for each return in the time series.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.expectedshortfall","page":"All Functions","title":"PerformanceAnalytics.expectedshortfall","text":"expectedshortfall(R::AbstractArray{<:Number},p::Number,method::AbstractString=\"gaussian\")\n\nCalculates the Expected Shortfall for a return series and a probility level p\n\nMethods:\n\ngaussian (Default)\nhistorical\ncornish_fisher  \n\nGaussian:\n\nExpectedShortfall_p = overliner + sigma*fracphi(Phi^-1(p))1-p text where Phi^-1text is the inverse of the normal CDF (quantile) and phitext is the pdf or the standard normal\n\n\n\n\n\n","category":"function"},{"location":"AllFunctions/#PerformanceAnalytics.expectedshortfall-2","page":"All Functions","title":"PerformanceAnalytics.expectedshortfall","text":"expectedshortfall(R::AssetReturn,p::Number,method::AbstractString=\"gaussian\")\n\nCalculates the Expected Shortfall for a return series and a probility level p\n\nMethods:\n\ngaussian (Default)\nhistorical\ncornish_fisher  \n\n\n\n\n\n","category":"function"},{"location":"AllFunctions/#PerformanceAnalytics.factor_alpha-Tuple{AbstractArray{<:Number}, Vararg{AbstractArray{<:Number}}}","page":"All Functions","title":"PerformanceAnalytics.factor_alpha","text":"factor_alpha(Y::AbstractArray{<:Number},X::AbstractArray{<:Number}...)\n\nReturns the α (intercept) of a (factor) regression.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.factor_loadings-Tuple{AbstractArray{<:Number}, Vararg{AbstractArray{<:Number}}}","page":"All Functions","title":"PerformanceAnalytics.factor_loadings","text":"factor_loadings(Y::AbstractArray{<:Number},X::AbstractArray{<:Number}...;intercept::Bool=true)\n\nReturns the factor loadings (beta estimates) of a (factor) regression.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.factor_regression-Tuple{AbstractArray{<:Number}, Vararg{AbstractArray{<:Number}}}","page":"All Functions","title":"PerformanceAnalytics.factor_regression","text":"factor_regression(Y::AbstractArray{<:Number},X::AbstractArray{<:Number}...;intercept::Bool=true)\n\nReturns alpha and beta estimates of a regression.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.factor_resid-Tuple{AbstractArray{<:Number}, Vararg{AbstractArray{<:Number}}}","page":"All Functions","title":"PerformanceAnalytics.factor_resid","text":"factor_resid(Y::AbstractArray{<:Number},X::AbstractArray{<:Number}...;intercept::Bool=true)\n\nReturns the residuals of a (factor) regression.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.hurstindex-Tuple{AbstractArray{<:Number}}","page":"All Functions","title":"PerformanceAnalytics.hurstindex","text":"hurstindex(R::AbstractArray{<:Number})\n\nMeasures whether returns are random, peristent, or mean reverting.\n\n0 to 0.5: mean reverting    \n0.5: random\n0.5 to 1: persistent\n\nHurstIndex = fraclog(fracmax(r) - min(r)sigma)log(n)\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.hurstindex-Tuple{AssetReturn}","page":"All Functions","title":"PerformanceAnalytics.hurstindex","text":"hurstindex(R::AssetReturn)\n\nMeasures whether returns are random, peristent, or mean reverting.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.id-Tuple{AssetPrice}","page":"All Functions","title":"PerformanceAnalytics.id","text":"id(x::AssetPrice)\n\nReturns the id (ticker) of the asset.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.id-Tuple{AssetReturn}","page":"All Functions","title":"PerformanceAnalytics.id","text":"id(x::AssetReturn)\n\nReturns the id (ticker) of the asset.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.informationratio-Tuple{AbstractArray{<:Number}, AbstractArray{<:Number}}","page":"All Functions","title":"PerformanceAnalytics.informationratio","text":"informationratio(Ra::AbstractArray{<:Number},Rb::AbstractArray{<:Number},scale::Number=1)\n\nCalculates the Information Ratio. It is defined as the Active Premium over the Tracking Error. The tracking error needs to be annualized therefore it is important to specify the periodecity of the data with scale.\n\nInformationRatio(RaRbscale) = fracActivePremium(r_ar_bscale)TrackingError(r_ar_bscale) = frac(1+overliner_a)^scale- (1+overliner_b)^scalesqrtsum_t=1^nfrac(r_at -r_bt)^2ntimessqrtscale\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.informationratio-Tuple{AssetReturn, AssetReturn}","page":"All Functions","title":"PerformanceAnalytics.informationratio","text":"informationratio(Ra::AssetReturn,Rb::AssetReturn)\n\nCalculates the Information Ratio. It is defined as the Active Premium over the Tracking Error.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.jensensalpha-Tuple{AbstractArray{<:Number}, Vararg{AbstractArray{<:Number}}}","page":"All Functions","title":"PerformanceAnalytics.jensensalpha","text":"jensensalpha(Y::AbstractArray{<:Number},X::AbstractArray{<:Number}...;scale::Number=1)\n\nReturns the annualized Jensens Alpha.\n\nArguments\n\nY the assets return\nX the benchmark return \nscale the scaling number used to annualize returns (defaults to 1)\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.jensensalpha-Tuple{AssetReturn, Vararg{AssetReturn}}","page":"All Functions","title":"PerformanceAnalytics.jensensalpha","text":"jensensalpha(Y::AssetReturn,X::AssetReturn...)\n\nReturns the annualized Jensens Alpha.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.kappa","page":"All Functions","title":"PerformanceAnalytics.kappa","text":"kappa(R::AbstractArray{<:Number},MAR::Number=0.,k::Number=2)\n\nIf k=1 this returns the Sharpe-Omega Ratio. If k=2 this returns the Sortino Ratio\n\nKappa = fracr-MARsqrtkfrac1n*sum_t=1^nmax(MAR - r_t0)^k\n\n\n\n\n\n","category":"function"},{"location":"AllFunctions/#PerformanceAnalytics.kappa-2","page":"All Functions","title":"PerformanceAnalytics.kappa","text":"kappa(R::AssetReturn,MAR::Number=0.;k::Number=2)\n\nIf k=1 this returns the Sharpe-Omega Ratio. If k=2 this returns the Sortino Ratio\n\n\n\n\n\n","category":"function"},{"location":"AllFunctions/#PerformanceAnalytics.kurt","page":"All Functions","title":"PerformanceAnalytics.kurt","text":"kurt(R, method=\"simple\")\n\nCalculates the kurtosis of a series.\n\nMethods:\n\npopulation\nexcess (population - 3)\nsample\nsampleexcess (sample - 3)\nfisher\n\n\n\n\n\n","category":"function"},{"location":"AllFunctions/#PerformanceAnalytics.log_diff-Tuple{Any}","page":"All Functions","title":"PerformanceAnalytics.log_diff","text":"log_diff(x)\n\nReturns the logarithmic difference. (Calculates log returns from a price series)\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.maxdrawdown-Tuple{AbstractArray{<:Number}}","page":"All Functions","title":"PerformanceAnalytics.maxdrawdown","text":"maxdrawdown(x::AbstractArray{<:Number})\n\nCalculates the maximum drawdow for a return series.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.maxdrawdown-Tuple{AssetReturn}","page":"All Functions","title":"PerformanceAnalytics.maxdrawdown","text":"maxdrawdown(x::AssetReturn)\n\nCalculates the maximum drawdow for a return series.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.mean_arith-Tuple{Any}","page":"All Functions","title":"PerformanceAnalytics.mean_arith","text":"mean_arith(x)\n\nCalculates the arithmetic mean of a series.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.mean_geo-Tuple{AbstractArray{Float64}}","page":"All Functions","title":"PerformanceAnalytics.mean_geo","text":"mean_geo(returns::Vector{Float64})\n\nCalculates the geometric mean of a series.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.mean_geo_log-Tuple{Vector{Float64}}","page":"All Functions","title":"PerformanceAnalytics.mean_geo_log","text":"mean_geo_log(returns::Vector{Float64})\n\nCalculates the geometric mean of a series.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.painindex-Tuple{AbstractArray{<:Number}}","page":"All Functions","title":"PerformanceAnalytics.painindex","text":"painindex(R::AbstractArray{<:Number})\n\nMean value of drawdowns over entire period.\n\nPainIndex = sum_t=1^n fracD_tntext where D_ttext is the drawdown at time t since the last peak\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.painindex-Tuple{AssetReturn}","page":"All Functions","title":"PerformanceAnalytics.painindex","text":"painindex(R::AssetReturn)\n\nCalculates the Pain Index.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.pct_change-Tuple{Any}","page":"All Functions","title":"PerformanceAnalytics.pct_change","text":"pct_change(x)\n\nReturns the percent change of an array. (Calculates returns from a price series)\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.roll_apply-Tuple{Vararg{AbstractVector{<:Number}}}","page":"All Functions","title":"PerformanceAnalytics.roll_apply","text":"roll_apply(data::AbstractVector{<:Number}...;fun::Function, window::Int,retain_length::Bool=false,fill_with = NaN,always_return::Bool=false)\n\nApplies a fun::Function over a rolling window.\n\nArguments:\n\ndata::AbstractArray{<:Number}: one or multiple arrays.\nfun::Function: the function to be applied. Has to return a single value (not a Vector of values).\nwindow::Int: the window length.\nretain_length::Bool: whether to original length of the data provided should be retained. If true fills the observations that could not be calculated with fill_with.\nfill_with: The value that should be returned for values that could not be calculated.\nalways_return::Bool: returns a vector with fill_with equal to the initial data length if the window is longer than the length of the input data.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.scale-Tuple{AssetPrice}","page":"All Functions","title":"PerformanceAnalytics.scale","text":"scale(x::AssetPrice)\n\nReturns the scaling number for the asset. Used to for annualization.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.scale-Tuple{AssetReturn}","page":"All Functions","title":"PerformanceAnalytics.scale","text":"scale(x::AssetReturn)\n\nReturns the scaling number for the asset. Used to for annualization.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.semideviation-Tuple{AbstractArray{<:Number}}","page":"All Functions","title":"PerformanceAnalytics.semideviation","text":"semideviation((R::AbstractArray{<:Number})\n\nCalculates the semi deviation of a return series. This is equal to the downside deviation where the MAR is set to the arithmetic mean of the return series.\n\nSemiDeviation = sqrtsum_t=1^nfracmin(r_t-overliner)0^2n\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.semideviation-Tuple{AssetReturn}","page":"All Functions","title":"PerformanceAnalytics.semideviation","text":"semideviation(R::AssetReturn)\n\nCalculates the semi deviation of a Asset Return.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.semivariance-Tuple{AbstractArray{<:Number}}","page":"All Functions","title":"PerformanceAnalytics.semivariance","text":"semivariance(R::AbstractArray{<:Number})\n\nCalculates the semi variance of a return series. This is equal to the square of the semi deviation.\n\nSemiVariance = SemiDeviation^2  = sum_t=1^nfracmin(r_t-overliner)0^2n\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.semivariance-Tuple{AssetReturn}","page":"All Functions","title":"PerformanceAnalytics.semivariance","text":"semivariance(R::AbstractArray{<:Number})\n\nCalculates the semi variance of a AssetReturn.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.sharperatio","page":"All Functions","title":"PerformanceAnalytics.sharperatio","text":"sharperatio(R::Number,σ::Number,Rf::Number=0.;scale=1)\n\nCalculates the Sharpe Ratio from a given return, standard deviation, and risk free rate.\n\nSR=fracr_a - r_fsigma_a\n\n\n\n\n\n","category":"function"},{"location":"AllFunctions/#PerformanceAnalytics.sharperatio-2","page":"All Functions","title":"PerformanceAnalytics.sharperatio","text":"sharperatio(R::AbstractArray{<:Number},Rf::Number=0.;scale)\n\nCalculates the Sharpe Ratio from a given return series and a risk free rate.\n\n\n\n\n\n","category":"function"},{"location":"AllFunctions/#PerformanceAnalytics.sharperatio-3","page":"All Functions","title":"PerformanceAnalytics.sharperatio","text":"sharperatio(R::AssetReturn,Rf::Number=0.)\n\nCalculates the annualized Sharpe Ratio.\n\n\n\n\n\n","category":"function"},{"location":"AllFunctions/#PerformanceAnalytics.simple_diff-Tuple{Any}","page":"All Functions","title":"PerformanceAnalytics.simple_diff","text":"simple_diff(x)\n\nReturns the difference. (Calculates the absolut price change)\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.skew","page":"All Functions","title":"PerformanceAnalytics.skew","text":"skew(R, method=\"simple\")\n\nCalculates the skewness of a series.\n\nMethods:\n\nPopulation\nSample\nFisher\n\n\n\n\n\n","category":"function"},{"location":"AllFunctions/#PerformanceAnalytics.specificrisk","page":"All Functions","title":"PerformanceAnalytics.specificrisk","text":"specificrisk(Ra::AbstractArray{<:Number},Rb::AbstractArray{<:Number},Rf::Number=0)\n\nThe spicific risk is calculated as the standard deviation of the residuals from a factor regression.\n\nSpecificRisk = std(epsilon_t) = std((r_at -r_f) - alpha - betatimes(r_bt-r_f))\n\n\n\n\n\n","category":"function"},{"location":"AllFunctions/#PerformanceAnalytics.specificrisk-2","page":"All Functions","title":"PerformanceAnalytics.specificrisk","text":"specificrisk(Ra::AssetReturn,Rb::AssetReturn,Rf::Number=0)\n\nThe spicific risk is calculated as the standard deviation of the residuals from a factor regression.\n\n\n\n\n\n","category":"function"},{"location":"AllFunctions/#PerformanceAnalytics.stdvp-Tuple{Any}","page":"All Functions","title":"PerformanceAnalytics.stdvp","text":"stdvp(x)\n\nCalculates the sample variance of a series.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.stdvs-Tuple{Any}","page":"All Functions","title":"PerformanceAnalytics.stdvs","text":"stdvs(x)\n\nCalculates the sample standard deviation of a series.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.systematicrisk","page":"All Functions","title":"PerformanceAnalytics.systematicrisk","text":"systematicrisk(Ra::AbstractArray{<:Number},Rb::AbstractArray{<:Number},Rf::Number=0)\n\nIs the systematic risk of the return. It is calculated by multipling the factor loading from a linear factor model of the return against the benchmark return by the standard deviation of the benchmark return.\n\nSystematicRisk = beta_r_ar_btimes std(R_b)\n\n\n\n\n\n","category":"function"},{"location":"AllFunctions/#PerformanceAnalytics.systematicrisk-2","page":"All Functions","title":"PerformanceAnalytics.systematicrisk","text":"systematicrisk(Ra::AssetReturn,Rb::AssetReturn,Rf::Number=0)\n\nCalculated by multipling the factor loading from a linear factor model of the return against the benchmark return by the standard deviation of the benchmark return.\n\n\n\n\n\n","category":"function"},{"location":"AllFunctions/#PerformanceAnalytics.timestamp-Tuple{AssetPrice}","page":"All Functions","title":"PerformanceAnalytics.timestamp","text":"timestamp(x::AssetPrice)\n\nReturns a vector of the timestamps of the asset.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.timestamp-Tuple{AssetReturn}","page":"All Functions","title":"PerformanceAnalytics.timestamp","text":"timestamp(x::AssetReturn)\n\nReturns a vector of the timestamps of the asset.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.to_annual_return-Tuple{AssetReturn}","page":"All Functions","title":"PerformanceAnalytics.to_annual_return","text":"to_annual_return(R::AssetReturn)\n\nGenerates a new AssetReturn on a annual frequency. This uses calendar time i.e. start of year to end of calendar year.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.to_monthly_return-Tuple{AssetReturn}","page":"All Functions","title":"PerformanceAnalytics.to_monthly_return","text":"to_monthly_return(R::AssetReturn)\n\nGenerates a new AssetReturn on a monthly frequency. This uses calendar time i.e. start of calendar month to end of calendar month.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.totalrisk","page":"All Functions","title":"PerformanceAnalytics.totalrisk","text":"totalrisk(Ra::AbstractArray{<:Number},Rb::AbstractArray{<:Number},Rf::Number=0)\n\nTotal risk is defined as a combination of systematic and specific risk.\n\nTotalRisk = sqrtSystematicRisk^2+SpecificRisk^2\n\n\n\n\n\n","category":"function"},{"location":"AllFunctions/#PerformanceAnalytics.totalrisk-2","page":"All Functions","title":"PerformanceAnalytics.totalrisk","text":"totalrisk(Ra::AssetReturn,Rb::AssetReturn,Rf::Number=0)\n\nTotal risk is defined as a combination of systematic and specific risk.\n\n\n\n\n\n","category":"function"},{"location":"AllFunctions/#PerformanceAnalytics.trackingerror","page":"All Functions","title":"PerformanceAnalytics.trackingerror","text":"trackingerror(Ra::AbstractArray{<:Number},Rb::AbstractArray{<:Number},scale::Number=1)\n\nMeasures how well a return tracks its benchmark.\n\nTrackingError(r_ar_b) = sqrtsum_t=1^nfrac(r_at -r_bt)^2n\n\n\n\n\n\n","category":"function"},{"location":"AllFunctions/#PerformanceAnalytics.trackingerror-Tuple{AssetReturn, AssetReturn}","page":"All Functions","title":"PerformanceAnalytics.trackingerror","text":"trackingerror(Ra::AssetReturn,Rb::AssetReturn)\n\nMeasures how well a return tracks its benchmark.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.treynorratio","page":"All Functions","title":"PerformanceAnalytics.treynorratio","text":"treynorratio(Ra::AbstractArray{<:Number},Rb::AbstractArray{<:Number},Rf::Number=0;modified::Bool=false,scale=1)\n\nScale argument used to annualize all numbers for daily data use 252 (default is 1), for monthly 12, etc.  \n\nSharpeRatio that uses beta as risk rather than the assets standard deviation of returns. The modified TreynorRatio uses the systematic risk rather than the beta.\n\nTreynorRatio = fracfrac1ntimessum_t=1^n (r_at-r_ft)beta_r_ar_b\n\nModifiedTreynorRatio = fracfrac1ntimessum_t=1^n (r_at-r_ft)beta_r_ar_btimes std(R_b)\n\n\n\n\n\n","category":"function"},{"location":"AllFunctions/#PerformanceAnalytics.treynorratio-2","page":"All Functions","title":"PerformanceAnalytics.treynorratio","text":"treynorratio(Ra::AssetReturn,Rb::AssetReturn,Rf::Number=0;modified::Bool=false)\n\nCalculates the Treynor Ratio.\n\n\n\n\n\n","category":"function"},{"location":"AllFunctions/#PerformanceAnalytics.valueatrisk","page":"All Functions","title":"PerformanceAnalytics.valueatrisk","text":"valueatrisk(R::AbstractArray{<:Number},p::Number,method::AbstractString=\"gaussian\")\n\nCalculates the Value at Risk (VaR) for a return series and a probility level p\n\nMethods:\n\ngaussian (Default)\nhistorical\ncornish_fisher  \n\nGaussian:\n\nVaR_p = = overliner + sigma*Phi^-1(p)\n\n\n\n\n\n","category":"function"},{"location":"AllFunctions/#PerformanceAnalytics.valueatrisk-2","page":"All Functions","title":"PerformanceAnalytics.valueatrisk","text":"valueatrisk(R::AssetReturn,p::Number,method::AbstractString=\"gaussian\")\n\nCalculates the Value at Risk (VaR) for a return series and a probility level p\n\nMethods:\n\ngaussian (Default)\nhistorical\ncornish_fisher  \n\n\n\n\n\n","category":"function"},{"location":"AllFunctions/#PerformanceAnalytics.varp-Tuple{Any}","page":"All Functions","title":"PerformanceAnalytics.varp","text":"varp(x)\n\nCalculates the population variance of a series.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#PerformanceAnalytics.vars-Tuple{Any}","page":"All Functions","title":"PerformanceAnalytics.vars","text":"vars(x)\n\nCalculates the population standard deviation of a series.\n\n\n\n\n\n","category":"method"},{"location":"VersionChanges/#This-file-will-document-all-changes-between-versions:","page":"Version Change Log","title":"This file will document all changes between versions:","text":"","category":"section"},{"location":"VersionChanges/","page":"Version Change Log","title":"Version Change Log","text":"info: v1.0.0\nFirst Version","category":"page"},{"location":"#PerformanceAnalytics.jl","page":"Home","title":"PerformanceAnalytics.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"GitHub Repo: https://github.com/eohne/PerformanceAnalytics.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"There is a different package that is registered and implements many of the functions available here: [PortfolioAnalytics.jl][https://github.com/doganmehmet/PortfolioAnalytics.jl]","category":"page"},{"location":"","page":"Home","title":"Home","text":"The package is NOT registerd in the General registry","category":"page"}]
}
